@page "/"
@using System.Net.Http.Json
@inject HttpClient HttpClient
@inject ILogger<Home> Logger

<PageTitle>Поиск книг в библиотеках</PageTitle>

<h1>Поиск книг в библиотеках</h1>

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Введите название книги" @bind="SearchQuery" @onkeyup="@EnterPressed" />
    <div class="input-group-append">
        <button class="btn btn-outline-secondary" type="button" @onclick="SearchBooks">Найти</button>
    </div>
</div>

@if (Books != null && Books.Any())
{
    <ul class="list-group book-list">
        @foreach (var book in Books)
        {
            <li class="list-group-item book-item @(SelectedBook?.BookId == book.BookId ? "active" : "")">
                <div class="book-header" @onclick="() => ToggleBookDetails(book)">
                    <div class="book-image-container">
                        @if (!string.IsNullOrEmpty(book.ImageSmallUrl))
                        {
                            <img src="@(SelectedBook?.BookId == book.BookId ? book.ImageBigUrl : book.ImageSmallUrl)"
                                 alt="@book.Title"
                                 class="@(SelectedBook?.BookId == book.BookId ? "book-big-image" : "book-small-image")" />
                        }
                        else
                        {
                            <div class="@(SelectedBook?.BookId == book.BookId ? "book-big-image-placeholder" : "book-small-image-placeholder")"></div>
                        }
                        <span class="book-type-icon">@GetBookTypeIcon(book.BookType.Name)</span>
                    </div>
                    <div class="book-info">
                        <strong class="book-title">@book.Title</strong>
                        <span class="author">@book.Author.Name</span>
                    </div>
                </div>
                @if (SelectedBook?.BookId == book.BookId)
                {
                    <div class="book-details">
                        @if (IsLoadingLibraries)
                        {
                            <div class="text-center my-3">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Загрузка...</span>
                                </div>
                            </div>
                        }
                        else if (Libraries != null && Libraries.Any())
                        {
                            <p class="libraries-message">Имеется в библиотеках:</p>
                            <ul class="list-group">
                                @foreach (var library in Libraries)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>@library.Name</span>
                                        @if (!LibraryUrls.ContainsKey(library.LibraryId))
                                        {
                                            <button class="btn btn-sm btn-primary" @onclick="@(() => GetLibraryUrl(library))">Получить ссылку</button>
                                        }
                                        else
                                        {
                                            <a href="@LibraryUrls[library.LibraryId]" target="_blank" class="btn btn-sm btn-link">@LibraryUrls[library.LibraryId]</a>
                                        }
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p class="libraries-message">Нет доступных библиотек для этой книги.</p>
                        }
                    </div>
                }
            </li>
        }
    </ul>
}

@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    private const string ApiBaseUrl = "https://litparse.somee.com";

    private string SearchQuery { get; set; }
    private List<Book> Books { get; set; }
    private Book SelectedBook { get; set; }
    private List<Library> Libraries { get; set; }
    private Dictionary<int, string> LibraryUrls { get; set; } = new Dictionary<int, string>();
    private bool IsLoadingLibraries { get; set; }

    protected override void OnInitialized()
    {
        if (Layout == null)
        {
            Logger.LogWarning("Layout is null in Home component");
        }
    }

    private async Task SearchBooks()
    {
        if (!string.IsNullOrWhiteSpace(SearchQuery))
        {
            var response = await HttpClient.GetFromJsonAsync<List<Book>>($"{ApiBaseUrl}/book?query={Uri.EscapeDataString(SearchQuery)}");
            Books = response;
            SelectedBook = null;
            Libraries = null;
            LibraryUrls.Clear();
        }
    }

    private async Task ToggleBookDetails(Book book)
    {
        if (SelectedBook?.BookId == book.BookId)
        {
            SelectedBook = null;
            Libraries = null;
        }
        else
        {
            SelectedBook = book;
            await GetLibraries(book);
        }
    }

    private async Task GetLibraries(Book book)
    {
        IsLoadingLibraries = true;
        Libraries = null;
        StateHasChanged();

        try
        {
            var response = await HttpClient.GetFromJsonAsync<List<Library>>($"{ApiBaseUrl}/Library/WithBook?bookId={book.BookId}");
            Libraries = response;
        }
        catch (Exception ex)
        {
            Layout?.ShowNotification($"Ошибка при загрузке списка библиотек: {ex.Message}");
        }
        finally
        {
            IsLoadingLibraries = false;
        }
    }

    private async Task GetLibraryUrl(Library library)
    {
        if (Layout == null)
        {
            Logger.LogError("Layout is null when trying to get library URL");
            return;
        }

        if (string.IsNullOrEmpty(Layout.AccessKey))
        {
            Layout.ShowNotification("Для получения ссылки необходимо указать ключ доступа.");
            return;
        }

        HttpClient.DefaultRequestHeaders.Clear();
        HttpClient.DefaultRequestHeaders.Add("X-Access-Key", Layout.AccessKey);

        try
        {
            var response = await HttpClient.GetFromJsonAsync<LibraryWithUrl>($"{ApiBaseUrl}/Library?libraryId={library.LibraryId}");
            LibraryUrls[library.LibraryId] = response.Url;
            await Layout.CheckAttempts();
        }
        catch (HttpRequestException e)
        {
            if (e.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Layout.ResetAccessKey();
                Layout.ShowNotification("Недействительный ключ доступа. Пожалуйста, введите ключ заново.");
            }
            else
            {
                Layout.ShowNotification($"Ошибка при получении ссылки: {e.Message}");
            }
            LibraryUrls.Remove(library.LibraryId);
        }
        StateHasChanged();
    }

    private string GetBookTypeIcon(string bookType) => bookType switch
    {
        "pdf" => "📄",
        "audio" => "🎧",
        "ebook" => "📚",
        _ => "📘"
    };

    private async Task EnterPressed(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SearchBooks();
        }
    }



    public class Book
    {
        public int BookId { get; set; }
        public string Title { get; set; }
        public string Url { get; set; }
        public Author Author { get; set; }
        public BookType BookType { get; set; }
        public string ImageSmallUrl { get; set; }
        public string ImageBigUrl { get; set; }
    }

    public class Author
    {
        public int AuthorId { get; set; }
        public string Name { get; set; }
        public string Url { get; set; }
    }

    public class BookType
    {
        public int BookTypeId { get; set; }
        public string Name { get; set; }
    }

    public class Library
    {
        public int LibraryId { get; set; }
        public string Name { get; set; }
    }

    public class LibraryWithUrl
    {
        public int LibraryId { get; set; }
        public string Name { get; set; }
        public string Url { get; set; }
    }
}